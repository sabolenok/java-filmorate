--DROP for testing in postman
DROP TABLE IF EXISTS films_rating;
DROP TABLE IF EXISTS rating;
DROP TABLE IF EXISTS films_genres;
DROP TABLE IF EXISTS genres;
DROP TABLE IF EXISTS films_likes;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS friendship;
DROP TABLE IF EXISTS friendship_status;
DROP TABLE IF EXISTS users;

CREATE TABLE IF NOT EXISTS users
(user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
user_name VARCHAR(200),
login VARCHAR(50),
email varchar(100),
birthday date);

CREATE TABLE IF NOT EXISTS films
(film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
film_name VARCHAR(200),
description VARCHAR(200),
release_date DATE,
duration INT);

CREATE TABLE IF NOT EXISTS rating(
rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
rating_name VARCHAR(10));

CREATE TABLE IF NOT EXISTS films_rating
(film_id INT NOT NULL,
rating_id INTEGER REFERENCES rating(rating_id));

CREATE TABLE IF NOT EXISTS genres(
genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
genre_name VARCHAR);

CREATE TABLE IF NOT EXISTS films_genres
(film_id INT NOT NULL,
genre_id INTEGER REFERENCES genres(genre_id));

CREATE TABLE IF NOT EXISTS films_likes(
like_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
film_id INTEGER REFERENCES films(film_id),
user_id INTEGER REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS friendship_status(
status_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
status_name VARCHAR(100));

CREATE TABLE IF NOT EXISTS friendship(
friendship_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
user1_id INTEGER REFERENCES users(user_id),
user2_id INTEGER REFERENCES users(user_id),
status_id INTEGER REFERENCES friendship_status(status_id)
);